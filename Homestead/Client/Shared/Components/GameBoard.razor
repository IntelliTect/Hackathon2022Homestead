@using Homestead.Client.ViewModels
@using Homestead.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject HubConnection hubConnection
@inject LobbyVm Lobby
@implements IDisposable
@inject HttpClient Http

<div class="map">
    <div class="row homestead-row">
        <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6 col-xxl-3">
            <PlayerHomestead Player="CurrentPlayer" />
        </div>
        @foreach (var opponent in Opponents)
        {
            <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6 col-xxl-3">
                <PlayerHomestead Player="@opponent" />
            </div>
        }
    </div>

    @if (IsOwnerOfGame && Board.State == Game.GameState.Joining)
    {
        <div class="row justify-content-md-center">
            <button type="button" class="btn btn-primary btn-lg col-sm" @onclick="StartGame">Start</button>
        </div>
    }
    else if (Board.State == Game.GameState.Complete && Board.WinningPlayer != null)
    {
        <div class="row justify-content-md-center">
            <h1 class="winning-banner">@Board.WinningPlayer.Player.Name Won the game!</h1>
        </div>
        <div class="row justify-content-md-center">
            <button type="button" class="new-game-button btn btn-success btn-lg col-sm" @onclick="()=>Navigation.NavigateTo('/'.ToString())">New Game</button>
        </div>
    }
</div>

<div class="last-play">
    @Lobby.Board.LastPlayText
</div>

<div class="player-hand">
    <DeckPile CanDraw="@(Board.CanDrawFromDeck && Board.State == Game.GameState.Playing)"></DeckPile>
    <DiscardPile Card="@Board.TopDiscardCard" CanDraw="@Board.CanDrawFromDiscard"></DiscardPile>
    <div class="player-hand-card-area">
        <PlayerHand HandList="@CurrentPlayer.Hand" />
        @for (int i = CurrentPlayer.Hand.Count(); i < 5; i++)
        {
            <div class="board-card">
                <BlankCard />
            </div>
        }
    </div>

    @if (Board.CanEndTurn)
    {
        <div class="end-turn" @onclick="EndTurn">
            <img class="card-image" src="/Assets/Images/cards/blank.png" />
            <div class="card-text">
                Next
            </div>

        </div>
    }

</div>

@code {
    //[CascadingParameter]
    public bool IsOwnerOfGame => CurrentPlayer.PlayerNumber == 1;

    private BoardVm Board => Lobby.Board;

    public List<PlayerVm> Opponents { get => Board.OtherPlayers; }
    public PlayerVm CurrentPlayer { get => Board.LocalPlayer; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Game Board Component with {Opponents.Count() + 1} Players");
        hubConnection.On<Game>("ExecuteAction", (game) =>
        {
            //Console.WriteLine("Got Game Update");
            foreach (var action in game.LastActions)
            {
                Console.WriteLine($"Last Action: {action.Type}");
            }
            Board.Update(game);
            //Console.WriteLine(Board.LocalPlayer.ToString());
            foreach (var player in Board.OtherPlayers)
            {
                Console.WriteLine(player);
            }
            //if (Board.CanDrawFromDeck) Console.WriteLine("Can Draw from Deck");
            //if (Board.CanDrawFromDiscard) Console.WriteLine("Can Draw from Discard");

            foreach (var action in game.AvailableActions)
            {
                Console.WriteLine($"Available Action: {action.Type}");
            }
            Console.WriteLine($"Player Cards: Hand: {Board.LocalPlayer.Hand.Count}  Board: {Board.LocalPlayer.Board.Count}");
            StateHasChanged();
        });
        Board.PerformAction += SendActionEvent!;

        await base.OnInitializedAsync();
    }

    public async void SendActionEvent(object sender, BoardVm.ActionEventArgs args)
    {
        Console.WriteLine($"Sending Action: {args.Action.Type}");
        await SendAction(args.Action);
    }

    public async Task SendAction(PlayerAction action)
    {
        await hubConnection.InvokeAsync("ExecuteAction", Board.GameId, action);
    }

    public async Task StartGame()
    {
        Console.WriteLine("Starting the game");
        var result = await Http.PostAsync($"start/{Board.GameId}", null);
        var game = await result.Content.ReadFromJsonAsync<Game>();
        if (game == null) throw new ArgumentException("Game could not start");
        // TODO: Do something with this failure case

        Board.Update(game);
        Console.WriteLine("Game Started");
    }

    public async Task DrawFromDeck()
    {
        var action = new PlayerAction(PlayerAction.ActionType.DrawFromDeck, Board.LocalPlayerNumber);
        await SendAction(action);
    }


    public async Task EndTurn()
    {
        var action = new PlayerAction(PlayerAction.ActionType.EndTurn, Board.LocalPlayerNumber);
        await SendAction(action);
    }



    public void Dispose()
    {
        hubConnection.Remove("ActionReceived");
    }
}
